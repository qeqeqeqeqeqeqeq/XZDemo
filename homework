
package com.odianyun.demo.service.impl;

import com.alibaba.fastjson.JSONObject;
import com.odianyun.demo.mapper.ListMapper;
import com.odianyun.demo.model.DTO.CodeDTO;
import com.odianyun.demo.model.VO.CodeVO;
import com.odianyun.demo.service.ListService;
import org.springframework.data.redis.core.ListOperations;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.core.ValueOperations;
import org.springframework.stereotype.Service;
import org.springframework.util.CollectionUtils;
import org.springframework.web.bind.annotation.RequestParam;

import javax.annotation.Resource;
import java.io.Serializable;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

@Service
public class ListServiceImpl implements ListService {

    private static final String CONTRACT_CHANGE_USER_TYPE = "user";
    @Resource
    private RedisTemplate<String, Serializable> redisTemplate;
    @Resource
    private ListMapper listMapper;

    @Override
    public List<CodeVO> queryByPoolAndCategory(CodeDTO dtos) {
        ValueOperations<String, Serializable> operations = redisTemplate.opsForValue();
        String key = CONTRACT_CHANGE_USER_TYPE + dtos.getPool() + dtos.getCategory();
        List<CodeVO> cacheCode = (List<CodeVO>) operations.get(key);

        if (!CollectionUtils.isEmpty(cacheCode)) {
            Iterator<CodeVO> iterator = cacheCode.iterator();
            while (iterator.hasNext()) {
                System.out.println(JSONObject.toJSONString(iterator.next()));
            }
            return (List<CodeVO>) cacheCode;
        }
        List<CodeVO> code = listMapper.listByCategory(dtos);
        operations.set(key, code);

        return code;
    }

    @Override
    public List<CodeVO> getNameByCode(CodeDTO dto) {
        ValueOperations operations = redisTemplate.opsForValue();

        String key = CONTRACT_CHANGE_USER_TYPE + dto.getPool() + dto.getCategory() + dto.getCode();
        System.out.println(key);
        List<CodeVO> cacheCode = (List<CodeVO>) operations.get(key);

        if (!CollectionUtils.isEmpty(cacheCode)) {
            System.out.println("使用了redis缓存");
            Iterator<CodeVO> iterator = cacheCode.iterator();
            while (iterator.hasNext()) {
                System.out.println(JSONObject.toJSONString(iterator.next()));
            }
            return (List<CodeVO>) cacheCode;
        }
        List<CodeVO> Code = listMapper.getNameByCode(dto);
        operations.set(key, Code);
        return Code;
    }
}

package com.odianyun.demo.service.impl;

import com.alibaba.fastjson.JSONObject;
import com.odianyun.demo.mapper.ListMapper;
import com.odianyun.demo.model.DTO.CodeDTO;
import com.odianyun.demo.model.VO.CodeVO;
import com.odianyun.demo.service.ListService;
import org.springframework.data.redis.core.ListOperations;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.core.ValueOperations;
import org.springframework.stereotype.Service;
import org.springframework.util.CollectionUtils;
import org.springframework.web.bind.annotation.RequestParam;

import javax.annotation.Resource;
import java.io.Serializable;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

@Service
public class ListServiceImpl implements ListService {

    private static final String CONTRACT_CHANGE_USER_TYPE = "user";
    @Resource
    private RedisTemplate<String, Serializable> redisTemplate;
    @Resource
    private ListMapper listMapper;

    @Override
    public List<CodeVO> queryByPoolAndCategory(CodeDTO dtos) {
        ValueOperations<String, Serializable> operations = redisTemplate.opsForValue();
        String key = CONTRACT_CHANGE_USER_TYPE + dtos.getPool() + dtos.getCategory();
        List<CodeVO> cacheCode = (List<CodeVO>) operations.get(key);

        if (!CollectionUtils.isEmpty(cacheCode)) {
            Iterator<CodeVO> iterator = cacheCode.iterator();
            while (iterator.hasNext()) {
                System.out.println(JSONObject.toJSONString(iterator.next()));
            }
            return (List<CodeVO>) cacheCode;
        }
        List<CodeVO> code = listMapper.listByCategory(dtos);
        operations.set(key, code);

        return code;
    }

    @Override
    public List<CodeVO> getNameByCode(CodeDTO dto) {
        ValueOperations operations = redisTemplate.opsForValue();

        String key = CONTRACT_CHANGE_USER_TYPE + dto.getPool() + dto.getCategory() + dto.getCode();
        System.out.println(key);
        List<CodeVO> cacheCode = (List<CodeVO>) operations.get(key);

        if (!CollectionUtils.isEmpty(cacheCode)) {
            System.out.println("使用了redis缓存");
            Iterator<CodeVO> iterator = cacheCode.iterator();
            while (iterator.hasNext()) {
                System.out.println(JSONObject.toJSONString(iterator.next()));
            }
            return (List<CodeVO>) cacheCode;
        }
        List<CodeVO> Code = listMapper.getNameByCode(dto);
        operations.set(key, Code);
        return Code;
    }
}

package com.odianyun.demo.model.DTO;

import java.io.Serializable;

public class CodeDTO implements Serializable {
    private static final long serialVersionUID = 438642606413449449L;
    private String pool;
    private String category;
    private String code;

    public String getCode() {
        return code;
    }

    public void setCode(String code) {
        this.code = code;
    }

    public String getPool() {
        return pool;
    }

    public void setPool(String pool) {
        this.pool = pool;
    }

    public String getCategory() {
        return category;
    }

    public void setCategory(String category) {
        this.category = category;
    }
}

<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.odianyun.demo.mapper.ListMapper">
    <select id="listByCategory" resultType="com.odianyun.demo.model.VO.CodeVO">
        select code,name
        from code
        <where>
        <if test="language != null">
            code = #{code}
        </if>
        <if test="isdeleted != null">
            and is_deleted = #{isdeleted}
        </if>
        <if test="pool != null">
            pool = #{pool}
        </if>
        <if test="category != null">
            and category = #{category }
        </if>
        </where>
    </select>
    <select id="getNameByCode" resultType="com.odianyun.demo.model.VO.CodeVO">
        select code,name
        from code
        where
        language = 'zh_CN' AND is_deleted = 0 AND pool = #{Pool} AND  code = #{Code} AND category = #{Category} ;
    </select>
</mapper>

package com.odianyun.demo.mapper;

import com.odianyun.demo.model.DTO.CodeDTO;
import com.odianyun.demo.model.VO.CodeVO;

import java.util.List;
import java.util.Map;

public interface ListMapper {


    List<CodeVO> listByCategory(CodeDTO dtos);

    List<CodeVO> getNameByCode(CodeDTO dto);
}
package com.odianyun.demo.service;

import com.odianyun.demo.model.DTO.CodeDTO;
import com.odianyun.demo.model.VO.CodeVO;

import java.util.List;
import java.util.Map;

public interface ListService {

    List<CodeVO> queryByPoolAndCategory(CodeDTO dtos);

    List<CodeVO> getNameByCode(CodeDTO dto);
}

